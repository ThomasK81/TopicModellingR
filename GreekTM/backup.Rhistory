write.table(similar_sentences.frame, file = filepath, append = FALSE, quote = FALSE, sep = "\n", eol = "\n\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
}
# example
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.45.2", 5)
sight_passages <- function(x, y) {
visualise_similarity(x, y)
similar_sentences <- sightreading(x, y)
similar_sentences.df <- sapply(similar_sentences, extract_sentences)
similar_sentences.df <- t(similar_sentences.df)
similar_sentences.df <- as.data.frame(similar_sentences.df)
colnames(similar_sentences.df) <- c(x, corpus[which(corpus == x), 2], corpus_parsed[which(corpus_parsed == x), 2])
for (i in 1:length(similar_sentences.df[,3])){
comparison <- unlist(strsplit(as.character(similar_sentences.df[i,3]), "[[:space:]]+"))
similar_sentences.df[i,4] <- as.character(paste(comparison %in% base_parsed, sep="", collapse = " "))
position_parsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == TRUE)
position_notparsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == FALSE)
text_vector <- unlist(strsplit(paste(similar_sentences.df[i,2], sep = "", collapse = " "), "[[:space:]]+"))
text_vector[position_parsed] <- paste("**", text_vector[position_parsed], "**", sep="")
text_vector[position_notparsed] <- paste("[", text_vector[position_notparsed], "]", "(http://www.perseus.tufts.edu/hopper/morph?l=", text_vector[position_notparsed], "&la=greek#lexicon)", sep="")
similar_sentences.df[i,5] <-paste(text_vector, sep="", collapse=" ")
similar_sentences.df[i,6] <- unname(table(comparison %in% base_parsed)["TRUE"])/(unname(table(comparison %in% base_parsed)["TRUE"])+unname(table(comparison %in% base_parsed)["FALSE"]))*100
}
colnames(similar_sentences.df)[4] <- "Word from base sentence?"
colnames(similar_sentences.df)[5] <- "Position known word"
colnames(similar_sentences.df)[6] <- "Percent known"
similar_sentences.frame <- data.frame(unname(unlist(similar_sentences.df[,1])),
unname(unlist(similar_sentences.df[,5])),
unname(unlist(similar_sentences.df[,6])))
colnames(similar_sentences.frame) <- c(colnames(similar_sentences.df[1]), colnames(similar_sentences.df[2]), colnames(similar_sentences.df[6]))
filepath <- paste('Greek_tab/', x, '.md', sep="")
write.table(similar_sentences.frame, file = filepath, append = FALSE, quote = FALSE, sep = "\n", eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
}
sight_passages <- function(x, y) {
visualise_similarity(x, y)
similar_sentences <- sightreading(x, y)
similar_sentences.df <- sapply(similar_sentences, extract_sentences)
similar_sentences.df <- t(similar_sentences.df)
similar_sentences.df <- as.data.frame(similar_sentences.df)
colnames(similar_sentences.df) <- c(x, corpus[which(corpus == x), 2], corpus_parsed[which(corpus_parsed == x), 2])
for (i in 1:length(similar_sentences.df[,3])){
comparison <- unlist(strsplit(as.character(similar_sentences.df[i,3]), "[[:space:]]+"))
similar_sentences.df[i,4] <- as.character(paste(comparison %in% base_parsed, sep="", collapse = " "))
position_parsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == TRUE)
position_notparsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == FALSE)
text_vector <- unlist(strsplit(paste(similar_sentences.df[i,2], sep = "", collapse = " "), "[[:space:]]+"))
text_vector[position_parsed] <- paste("**", text_vector[position_parsed], "**", sep="")
text_vector[position_notparsed] <- paste("[", text_vector[position_notparsed], "]", "(http://www.perseus.tufts.edu/hopper/morph?l=", text_vector[position_notparsed], "&la=greek#lexicon)", sep="")
similar_sentences.df[i,5] <-paste(text_vector, sep="", collapse=" ")
similar_sentences.df[i,6] <- unname(table(comparison %in% base_parsed)["TRUE"])/(unname(table(comparison %in% base_parsed)["TRUE"])+unname(table(comparison %in% base_parsed)["FALSE"]))*100
}
colnames(similar_sentences.df)[4] <- "Word from base sentence?"
colnames(similar_sentences.df)[5] <- "Position known word"
colnames(similar_sentences.df)[6] <- "Percent known"
similar_sentences.frame <- data.frame(unname(unlist(similar_sentences.df[,1])),
unname(unlist(similar_sentences.df[,5])),
unname(unlist(similar_sentences.df[,6])))
colnames(similar_sentences.frame) <- c(colnames(similar_sentences.df[1]), colnames(similar_sentences.df[2]), colnames(similar_sentences.df[6]))
filepath <- paste('Greek_tab/', x, '.md', sep="")
write.table(similar_sentences.frame, file = filepath, append = FALSE, quote = FALSE, sep = "\n", eol = "\n\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
}
# example
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.45.2", 5)
sight_passages <- function(x, y) {
visualise_similarity(x, y)
similar_sentences <- sightreading(x, y)
similar_sentences.df <- sapply(similar_sentences, extract_sentences)
similar_sentences.df <- t(similar_sentences.df)
similar_sentences.df <- as.data.frame(similar_sentences.df)
colnames(similar_sentences.df) <- c(x, corpus[which(corpus == x), 2], corpus_parsed[which(corpus_parsed == x), 2])
for (i in 1:length(similar_sentences.df[,3])){
comparison <- unlist(strsplit(as.character(similar_sentences.df[i,3]), "[[:space:]]+"))
similar_sentences.df[i,4] <- as.character(paste(comparison %in% base_parsed, sep="", collapse = " "))
position_parsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == TRUE)
position_notparsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == FALSE)
text_vector <- unlist(strsplit(paste(similar_sentences.df[i,2], sep = "", collapse = " "), "[[:space:]]+"))
text_vector[position_parsed] <- paste("**", text_vector[position_parsed], "**", sep="")
text_vector[position_notparsed] <- paste("[", text_vector[position_notparsed], "]", "(http://www.perseus.tufts.edu/hopper/morph?l=", text_vector[position_notparsed], "&la=greek#lexicon)", sep="")
similar_sentences.df[i,5] <-paste(text_vector, sep="", collapse=" ")
similar_sentences.df[i,6] <- unname(table(comparison %in% base_parsed)["TRUE"])/(unname(table(comparison %in% base_parsed)["TRUE"])+unname(table(comparison %in% base_parsed)["FALSE"]))*100
}
colnames(similar_sentences.df)[4] <- "Word from base sentence?"
colnames(similar_sentences.df)[5] <- "Position known word"
colnames(similar_sentences.df)[6] <- "Percent known"
similar_sentences.frame <- data.frame(unname(unlist(similar_sentences.df[,1])),
unname(unlist(similar_sentences.df[,5])),
unname(unlist(similar_sentences.df[,6])))
colnames(similar_sentences.frame) <- c(colnames(similar_sentences.df[1]), colnames(similar_sentences.df[2]), colnames(similar_sentences.df[6]))
filepath <- paste('Greek_tab/', x, '.md', sep="")
write.table(similar_sentences.frame, file = filepath, append = FALSE, quote = FALSE, sep = "<br>", eol = "<br><br>", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
}
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.45.2", 5)
sight_passages <- function(x, y) {
visualise_similarity(x, y)
similar_sentences <- sightreading(x, y)
similar_sentences.df <- sapply(similar_sentences, extract_sentences)
similar_sentences.df <- t(similar_sentences.df)
similar_sentences.df <- as.data.frame(similar_sentences.df)
colnames(similar_sentences.df) <- c(x, corpus[which(corpus == x), 2], corpus_parsed[which(corpus_parsed == x), 2])
for (i in 1:length(similar_sentences.df[,3])){
comparison <- unlist(strsplit(as.character(similar_sentences.df[i,3]), "[[:space:]]+"))
similar_sentences.df[i,4] <- as.character(paste(comparison %in% base_parsed, sep="", collapse = " "))
position_parsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == TRUE)
position_notparsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == FALSE)
text_vector <- unlist(strsplit(paste(similar_sentences.df[i,2], sep = "", collapse = " "), "[[:space:]]+"))
text_vector[position_parsed] <- paste("**", text_vector[position_parsed], "**", sep="")
text_vector[position_notparsed] <- paste("[", text_vector[position_notparsed], "]", "(http://www.perseus.tufts.edu/hopper/morph?l=", text_vector[position_notparsed], "&la=greek#lexicon)", sep="")
similar_sentences.df[i,5] <-paste(text_vector, sep="", collapse=" ")
similar_sentences.df[i,6] <- unname(table(comparison %in% base_parsed)["TRUE"])/(unname(table(comparison %in% base_parsed)["TRUE"])+unname(table(comparison %in% base_parsed)["FALSE"]))*100
}
colnames(similar_sentences.df)[4] <- "Word from base sentence?"
colnames(similar_sentences.df)[5] <- "Position known word"
colnames(similar_sentences.df)[6] <- "Percent known"
similar_sentences.frame <- data.frame(unname(unlist(similar_sentences.df[,1])),
unname(unlist(similar_sentences.df[,5])),
unname(unlist(similar_sentences.df[,6])))
colnames(similar_sentences.frame) <- c(colnames(similar_sentences.df[1]), colnames(similar_sentences.df[2]), colnames(similar_sentences.df[6]))
filepath <- paste('Greek_tab/', x, '.md', sep="")
write.table(similar_sentences.frame, file = filepath, append = FALSE, quote = FALSE, sep = "<br>/n", eol = "<br><br>/n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
}
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.45.2", 5)
sight_passages <- function(x, y) {
visualise_similarity(x, y)
similar_sentences <- sightreading(x, y)
similar_sentences.df <- sapply(similar_sentences, extract_sentences)
similar_sentences.df <- t(similar_sentences.df)
similar_sentences.df <- as.data.frame(similar_sentences.df)
colnames(similar_sentences.df) <- c(x, corpus[which(corpus == x), 2], corpus_parsed[which(corpus_parsed == x), 2])
for (i in 1:length(similar_sentences.df[,3])){
comparison <- unlist(strsplit(as.character(similar_sentences.df[i,3]), "[[:space:]]+"))
similar_sentences.df[i,4] <- as.character(paste(comparison %in% base_parsed, sep="", collapse = " "))
position_parsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == TRUE)
position_notparsed <- which(unlist(strsplit(as.character(similar_sentences.df[i,4]), "[[:space:]]+")) == FALSE)
text_vector <- unlist(strsplit(paste(similar_sentences.df[i,2], sep = "", collapse = " "), "[[:space:]]+"))
text_vector[position_parsed] <- paste("**", text_vector[position_parsed], "**", sep="")
text_vector[position_notparsed] <- paste("[", text_vector[position_notparsed], "]", "(http://www.perseus.tufts.edu/hopper/morph?l=", text_vector[position_notparsed], "&la=greek#lexicon)", sep="")
similar_sentences.df[i,5] <-paste(text_vector, sep="", collapse=" ")
similar_sentences.df[i,6] <- unname(table(comparison %in% base_parsed)["TRUE"])/(unname(table(comparison %in% base_parsed)["TRUE"])+unname(table(comparison %in% base_parsed)["FALSE"]))*100
}
colnames(similar_sentences.df)[4] <- "Word from base sentence?"
colnames(similar_sentences.df)[5] <- "Position known word"
colnames(similar_sentences.df)[6] <- "Percent known"
similar_sentences.frame <- data.frame(unname(unlist(similar_sentences.df[,1])),
unname(unlist(similar_sentences.df[,5])),
unname(unlist(similar_sentences.df[,6])))
colnames(similar_sentences.frame) <- c(colnames(similar_sentences.df[1]), colnames(similar_sentences.df[2]), colnames(similar_sentences.df[6]))
filepath <- paste('Greek_tab/', x, '.md', sep="")
write.table(similar_sentences.frame, file = filepath, append = FALSE, quote = FALSE, sep = "<br>\n", eol = "<br><br>\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
}
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.45.2", 5)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 5)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.2", 5)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.3", 5)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.3", 1)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.3", 1)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.3", 2)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.5", 2)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.2", 2)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 2)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 2)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 1)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 2)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 1)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 2)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 5)
sight_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.2", 7)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 3)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 1)
visualise_similarity <- function(x, y) {
sightreadings <- sightreading(x, y)
passages <- as.vector(unname(sapply(sightreadings, neighbours)))
matrix_slice <- test_matrix[passages, find_start(x):find_end(x)]
matrix_slice <- matrix_slice[order(rownames(matrix_slice)),]
d3heatmap(matrix_slice, dendrogram = "none", color = "Blues", anim_duration = 0, xaxis_font_size = 12, yaxis_font_size = 12)
}
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 1)
visualise_similarity("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.22.1", 5)
rm test_matrix2
rm(test_matrix2)
View(theta.frame)
theta.frame[1,]
max(theta.frame[1,])
max(theta.frame[1,2:13])
which(theta.frame[1,2:13] == max(theta.frame[1,2:13]))
max(theta.frame[1,6])
theta.frame[1,6]
theta.frame[,1]
which(theta.frame["urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:8.109.2",2:13] == max(theta.frame["urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:8.109.2",2:13]))
which(theta.frame[3577,2:13] == max(theta.frame[3577,2:13]))
which(theta.frame[which(theta.frame[,1] == "urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:8.109.2"),2:13] == max(theta.frame[which(theta.frame[,1] == "urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:8.109.2"),2:13]))
passage.topic.value <- function(x) {
return(which(theta.frame[which(theta.frame[,1] == x),2:13] == max(theta.frame[which(theta.frame[,1] == x),2:13])))
}
passage.topic.value("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:8.109.2")
what <- sapply(theta.frame[,1], passage.topic.value)
passage.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
topic <- which(theta.frame[which(theta.frame[,1] == x),2:13] == max_score)
result <- topic + max_score
return(result)
}
what <- sapply(theta.frame[,1], passage.topic.value)
head(what)
columns <- cealing(3577 / 2)
columns <- ceiling(3577 / 2)
columns
which(grepl("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.2.3",theta.frame[,1]) == TRUE)
which(grepl("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.2",theta.frame[,1]) == TRUE)
which(grepl("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1",theta.frame[,1]) == TRUE)
find_passages <- function(x) {
which(grepl(x,theta.frame[,1]) == TRUE)
}
find_passages <- function(x) {
positions <- which(grepl(x,theta.frame[,1]) == TRUE)
return(theta.frame[,1][positions])
}
find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1")
find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.")
find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:2.")
find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:3.")
book1 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.")
book2 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:2.")
book3 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:3.")
book4 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:4.")
book5 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:5.")
book6 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:6.")
book7 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:7.")
book8 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:8.")
topics_book1 <- sapply(book1, passage.topic.value)
topics_book1 <- apply(book1, passage.topic.value)
topics_book1 <- mapply(book1, passage.topic.value)
topics_book1 <- vapply(book1, passage.topic.value)
topics_book1 <- sapply(book1, passage.topic.value)
topics_book1[1]
d3heatmap(topics_book1[1], dendrogram = "none", color = "Blues", anim_duration = 0, xaxis_font_size = 12, yaxis_font_size = 12)
}
d3heatmap(topics_book1[1], dendrogram = "none", color = "Blues", anim_duration = 0, xaxis_font_size = 12, yaxis_font_size = 12)
d3heatmap(unlist(topics_book1[1]), dendrogram = "none", color = "Blues", anim_duration = 0, xaxis_font_size = 12, yaxis_font_size = 12)
d3heatmap(unlist(topics_book1[1:3]), dendrogram = "none", color = "Blues", anim_duration = 0, xaxis_font_size = 12, yaxis_font_size = 12)
length(topics_book1)
x-axis <- 1:length(topics_book1)
x_axis <- 1:length(topics_book1)
x_axis <- names(topic_book1)
x_axis <- names(topics_book1)
x_axis
plot(x_axis,topics_book1)
x_axis <- 1:length(topics_book1)
plot(x_axis,topics_book1)
plot(x_axis,unlist(topics_book1))
unlist(topics_book1)
unname(unlist(topics_book1))
length(unname(unlist(topics_book1)))
x_axis <- names(topics_book1)
topic_book1 <- unname(unlist(topics_book1))
plot(x_axis,unlist(topic_book1))
length(x_axis)
length(book1)
topics_book1 <- sapply(book1, passage.topic.value)
View(topics_book1)
passage.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
topic <- which(theta.frame[which(theta.frame[,1] == x),2:13] == max_score)
result <- topic + max_score
result <- unique(result)
return(result)
}
topics_book1 <- sapply(book1, passage.topic.value)
View(topics_book1)
topics_book1 <- t(topics_book1)
View(topics_book1)
topics_book1 <- as.vector(topics_book1)
View(topics_book1)
topics_book1 <- as.vector(unlist(topics_book1))
topics_book1 <- sapply(book1, passage.topic.value)
topics_book1 <- t(topics_book1)
topics_book1[1]
topics_book1[2]
unlist(topics_book1[1])
as.number(topics_book1[1])
unlist(topics_book1[1])
unlist(topics_book1)
passage.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
topic <- which(theta.frame[which(theta.frame[,1] == x),2:13] == max_score)
result <- topic + max_score
result <- unique(result)
result <- unlist(result)
return(result)
}
topics_book1 <- sapply(book1, passage.topic.value)
book1[1]
passage.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
topic <- which(theta.frame[which(theta.frame[,1] == x),2:13] == max_score)
result <- topic + max_score
result <- unique(result)
result <- unlist(result)
result <- unname(result)
return(result)
}
topics_book1 <- sapply(book1, passage.topic.value)
topics_book1 <- vapply(book1, passage.topic.value, numerical)
topics_book1 <- vapply(book1, passage.topic.value, identity)
vapply.?
vapply(?)
?vapply
topics_book1 <- vapply(book1, passage.topic.value, numerical(1))
topics_book1 <- vapply(book1, passage.topic.value, Numerical(1))
topics_book1 <- vapply(book1, passage.topic.value, integer(1))
topics_book1 <- vapply(book1, passage.topic.value, numeric(1))
topics_book1 <- sapply(book1[59], passage.topic.value)
passage.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
topic <- which(theta.frame[which(theta.frame[,1] == x),2:13] == max_score)
result <- topic + max_score
result <- result[1]
return(result)
}
topics_book1 <- vapply(book1, passage.topic.value, numeric(1))
topics_book1[1]
book1.chapter1 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.1.")
topics_book1["book1.chapter1"]
topics_book1[book1.chapter1]
book1.chapter.1
book1.chapter1
find_passages <- function(x) {
positions <- which(grepl(x,theta.frame[,1]) == TRUE, fixed=TRUE)
return(theta.frame[,1][positions])
}
book1.chapter1 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.1.")
find_passages <- function(x) {
positions <- which(grepl(x,theta.frame[,1], fixed=TRUE) == TRUE)
return(theta.frame[,1][positions])
}
book1.chapter1 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:1.1.")
book1.chapter1
book2 <- find_passages("urn:cts:greekLit:tlg0003.tlg001.perseus-grc1:2.")
book2
book1
plot(x_axis,topic_book1)
plot(x_axis,topics_book1)
x_axis <- 1:length(topics_book1)
plot(x_axis,topics_book1)
plot(x_axis[1:10],topics_book1[1:10])
plot(topics_book1[1:10])
plot(topics_book1)
plot(topics_book1[1:50])
plot(topics_book1[51:100])
plot(topics_book1[51:100], xlab = "passage")
plot(topics_book1[51:100], xlab = "passage", ylab = "Thuc. Book 1")
plot(topics_book1[51:100], xlab = "Passage", ylab = "Topics in Thuc.")
plot(topics_book1[51:100], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", topics_book1[51], " to ", topics_book1[100]))
plot(topics_book1[51:100], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", topics_book1[100]))
plot(topics_book1[51:100], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
hist(topics_book1[51:100], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
boxplot(topics_book1[51:100], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
boxplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
lines(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
plot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
lines(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
plot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), type="o", col="blue")
plot(topics_book1[1:10], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), type="o", col="blue")
plot(topics_book1[1:10], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), type="x", col="blue")
plot(topics_book1[1:10], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), type="o", col="blue")
barplot(topics_book1[1:10], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
barplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])))
barplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=rainbow(5))
barplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=rainbow(12))
barplot(topics_book1[1:10], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=rainbow(12))
barplot(topics_book1[1:50], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=rainbow(12))
barplot(topics_book1[1:50], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=blues(12))
barplot(topics_book1[1:50], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=grays(12))
barplot(topics_book1[1:50], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=greys(12))
barplot(topics_book1[1:50], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=rainbow(12))
grep("yellow", colors(), value=TRUE)
grep("blue", colors(), value=TRUE)
example(rainbow)
example(brewer.pal)
library(RColorBrewer)
example(brewer.pal)
example(brewer.pal)
vis.col <- colorRampPalette(brewer.pal(10, "RdBu"))(12)
vis.col
barplot(topics_book1[1:50], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=vis.col)
barplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=vis.col)
vis.col <- colorRampPalette(brewer.pal(10, "RdBu"))(500)
barplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=vis.col)
vis.col <- colorRampPalette(brewer.pal(10, "Blues"))(12)
vis.col <- colorRampPalette(brewer.pal(10, "set3"))(12)
vis.col <- colorRampPalette(brewer.pal(10, "Set3"))(12)
barplot(topics_book1, xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=vis.col)
barplot(topics_book1[1:10], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=vis.col)
topics_book1.df <- data.frame(Topic = topics_book1,)
topics_book1.df <- data.frame(Topic = topics_book1,
Colour = character())
topics_book1.df <- data.frame(Topic = numeric(),
Colour = character())
View(topics_book1.df)
names(topics_book.df) <- book1
row.names(topics_book.df) <- book1
row.names(topics_book1.df) <- book1
topics_book1.df <- data.frame(matrix(NA, nrow=length(book1), ncol=2))
View(topics_book1.df)
topics_book1.df[,1] <- topics_book1
View(topics_book1.df)
vis.col <- colorRampPalette(brewer.pal(10, "Set3"))(12)
colourise <- function(x) {
if (x > 1 & x < 2) {return(vis.col(1))}
if (x > 2 & x < 3) {return(vis.col(2))}
if (x > 3 & x < 4) {return(vis.col(3))}
if (x > 4 & x < 5) {return(vis.col(4))}
if (x > 5 & x < 6) {return(vis.col(5))}
if (x > 6 & x < 7) {return(vis.col(6))}
if (x > 7 & x < 8) {return(vis.col(7))}
if (x > 8 & x < 9) {return(vis.col(8))}
if (x > 9 & x < 10) {return(vis.col(9))}
if (x > 10 & x < 11) {return(vis.col(10))}
if (x > 11 & x < 12) {return(vis.col(11))}
if (x > 12 & x < 13) {return(vis.col(12))}
}
topics_book1.df[,1] <- sapply(topics_book1, colourise)
colourise <- function(x) {
if (x > 1 & x < 2) {return(vis.col[1])}
if (x > 2 & x < 3) {return(vis.col[2])}
if (x > 3 & x < 4) {return(vis.col[3])}
if (x > 4 & x < 5) {return(vis.col[4])}
if (x > 5 & x < 6) {return(vis.col[5]}
if (x > 6 & x < 7) {return(vis.col[6]}
if (x > 7 & x < 8) {return(vis.col[7]}
if (x > 8 & x < 9) {return(vis.col[8]}
if (x > 9 & x < 10) {return(vis.col[9]}
if (x > 10 & x < 11) {return(vis.col[10]}
if (x > 11 & x < 12) {return(vis.col[11])}
if (x > 12 & x < 13) {return(vis.col[12]}
}
colourise <- function(x) {
if (x > 1 & x < 2) {return(vis.col[1])}
if (x > 2 & x < 3) {return(vis.col[2])}
if (x > 3 & x < 4) {return(vis.col[3])}
if (x > 4 & x < 5) {return(vis.col[4])}
if (x > 5 & x < 6) {return(vis.col[5])}
if (x > 6 & x < 7) {return(vis.col[6])}
if (x > 7 & x < 8) {return(vis.col[7])}
if (x > 8 & x < 9) {return(vis.col[8])}
if (x > 9 & x < 10) {return(vis.col[9])}
if (x > 10 & x < 11) {return(vis.col[10])}
if (x > 11 & x < 12) {return(vis.col[11])}
if (x > 12 & x < 13) {return(vis.col[12])}
}
topics_book1.df[,1] <- sapply(topics_book1, colourise)
topics_book1.df[,1] <- topics_book1
topics_book1.df[,2] <- sapply(topics_book1, colourise)
View(topics_book1.df)
just.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
result <- result[1]
return(result)
}
topics_book1.df <- data.frame(matrix(NA, nrow=length(book1), ncol=3))
topics_book1.df[,1] <- topics_book1
topics_book1.df[,2] <- sapply(topics_book1, colourise)
topics_book1.df[,3] <- sapply(book1, just.topic.value)
just.topic.value <- function(x) {
max_score <- max(theta.frame[which(theta.frame[,1] == x),2:13])
result <- max_score[1]
return(result)
}
topics_book1.df[,3] <- sapply(book1, just.topic.value)
View(topics_book1.df)
barplot(topics_book1.df[1:10,3], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=vis.col)
barplot(topics_book1.df[1:10,3], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=topics_book1.df[,2])
barplot(topics_book1.df[,3], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=topics_book1.df[,2])
barplot(topics_book1.df[1:100,3], xlab = "Passage", ylab = "Topics", main = paste("Topics in ", names(topics_book1[51]), " to ", names(topics_book1[100])), col=topics_book1.df[,2])
vis.col <- colorRampPalette(brewer.pal(10, "Set3"))(12)
topics_book2.df <- data.frame(matrix(NA, nrow=length(book1), ncol=3))
topics_book2.df[,1] <- sapply(book2, passage.topic.value)
topics_book2.df[,2] <- sapply(topics_book2.df[,1], colourise)
topics_book2.df[,3] <- sapply(book2, just.topic.value)
vis.col <- colorRampPalette(brewer.pal(10, "Set3"))(12)
topics_book2.df <- data.frame(matrix(NA, nrow=length(book2), ncol=3))
topics_book2.df[,1] <- sapply(book2, passage.topic.value)
topics_book2.df[,2] <- sapply(topics_book2.df[,1], colourise)
topics_book2.df[,3] <- sapply(book2, just.topic.value)
barplot(topics_book2.df[1:100,3], xlab = "Passage", ylab = "Topic Value", main = "The Plague's Topics", col=topics_book2.df[,2])
book2
book2[50]
book2[200]
book2[190]
book2[189]
book2[220]
barplot(topics_book2.df[189:220,3], xlab = "Passage", ylab = "Topic Value", main = "The Plague's Topics", col=topics_book2.df[,2])
barplot(topics_book2.df[189:220,3], xlab = "Passage 2.48.1 to 2.54.5", ylab = "Topic Value", main = "The Plague's Topics", col=topics_book2.df[,2])
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv/rCharts')
require(devtools)
install_github('rCharts', 'ramnathv/rCharts/rCharts')
require(devtools)
install_github('rCharts', 'ramnathv')
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install_github('ramnathv/rCharts')
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install.packages('Rcpp')
install.packages("Rcpp")
savehistory("~/OneDrive/TopicModellingR/GreekTM/backup.Rhistory")
